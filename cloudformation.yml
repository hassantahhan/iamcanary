AWSTemplateFormatVersion: '2010-09-09'
Description: 'Canary Testing of IAM Permissions'
Parameters:
  PrincipalsActionsJSON:
    Default: '{}'
    Type: String
  AlertNotificationEmail:
    Default: 'name@domain.com'
    Type: String
Resources:
  IAMPolicySimulatorLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:SimulatePrincipalPolicy
            Resource: '*'
  CheckPrincipalsActionsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'IAMPolicySimulatorLambdaAccess'
  CheckPrincipalsActionsEventScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'CheckPrincipalsActions.Arn'
          Id: 'CheckPrincipalsActionsScheduler'
  CheckPrincipalsActionsSchedulerPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref 'CheckPrincipalsActions'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt 'CheckPrincipalsActionsEventScheduler.Arn'
  CheckPrincipalsActionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      Namespace: AWS/Lambda
      MetricName: Errors
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref 'CheckPrincipalsActionsLambdaErrorTopic'
      Dimensions:
        - Name: FunctionName
          Value: !Ref 'CheckPrincipalsActions'
      TreatMissingData: missing
      Statistic: Sum
  CheckPrincipalsActionsLambdaErrorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: 'CheckPrincipalsActionsLambdaErrorTopic'
      Subscription:
          - Protocol: email
            Endpoint: !Ref 'AlertNotificationEmail'
  CheckPrincipalsActions:
    Type: AWS::Lambda::Function
    Properties:
      Description: Check actions assigned to an IAM users, roles, or groups
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt 'CheckPrincipalsActionsLambdaRole.Arn'
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          principals_actions_json: !Ref 'PrincipalsActionsJSON'
      Code:
        ZipFile: |
          import os
          import json
          import boto3

          # lambda handler for canary test of allowed and denied principles actions 
          def lambda_handler(event, context): 
              return read_and_simulate_principals_actions()

          # read effects, principles, and actions to simulate IAM entity permissions
          def read_and_simulate_principals_actions():
              # read json and initialize dictionaries
              input_json = os.environ.get('principals_actions_json', '{}')
              dictionary = json.loads(input_json)

              denied_pairs = dict()
              allowed_pairs = dict()

              if 'denied_pairs' in dictionary:
                  denied_pairs = dictionary['denied_pairs']

              if 'allowed_pairs' in dictionary:
                  allowed_pairs = dictionary['allowed_pairs']

              # test denied pairs before allowed pairs
              for key in denied_pairs:
                  simulate_principal_actions(key, denied_pairs[key], False)

              for key in allowed_pairs:
                  simulate_principal_actions(key, allowed_pairs[key], True)

              return 'Completed test of ' + str(len(allowed_pairs)) + ' allowed pair(s) and ' + str(len(denied_pairs)) + ' denied pair(s)'     
              
          # check if one principal is allowed (effect_allow = true) or denied (effect_allow = false) on all actions
          def simulate_principal_actions(principal_arn, action_names, effect_allow):
              client = boto3.client('iam')
              result = client.simulate_principal_policy(PolicySourceArn=principal_arn, ActionNames=tuple(action_names.split(',')))

              input_string = 'effect_allow=' + str(effect_allow) + ', principal_arn=' + principal_arn + ', action_names=' + action_names

              for decision in (result['EvaluationResults']):
                  if effect_allow and 'Deny' in decision['EvalDecision']:
                      raise Exception('Failed allow test: ' + input_string)
                  elif not effect_allow and decision['EvalDecision'] == 'allowed':
                      raise Exception('Failed deny test: ' + input_string)
                  
              return 'Completed test: ' + input_string